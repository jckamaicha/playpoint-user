import{Q as d}from"./js/index.js";import{s as n}from"./Profile.js";const{ethereum:r}=window,h=localStorage.getItem("isNonWalletUser"),f=async()=>{try{await r.request({method:"wallet_switchEthereumChain",params:[{chainId:"0xAA36A7"}]})}catch(t){if(t.code===4902){d.error("Looks like we need to add sepolia test network.");try{await r.request({method:"wallet_addEthereumChain",params:[{chainId:"0xAA36A7",chainName:"Sepolia Testnet",rpcUrls:["https://sepolia.infura.io/v3/"],nativeCurrency:{name:"Sepolia",symbol:"ETH",decimals:18},blockExplorerUrls:["https://sepolia.etherscan.io"],iconUrls:["https://ethereum.org/en/"]}]})}catch(e){console.log(e)}}}try{if(typeof r<"u"){const t=await r.request({method:"eth_requestAccounts"});r.isMetaMask?console.log("Metamask Says: Other EVM Compatible Wallets not detected!"):console.log("Metamask Says: Other EVM Compatible wallets maybe installed!");const e={userPublicAddress:t[0],isWalletConnected:!0,username:"",network:"arbitrum",isNonWalletUser:!1};t[0]&&await n({data:e}).then(s=>{e.username=s.data.profile.username});const a=new Date;return a.setTime(a.getTime()+6*60*60*1e3),localStorage.setItem("rpcUserData",JSON.stringify(e)),localStorage.setItem("isRPCUserAuthenticated",!0),localStorage.setItem("rpcUserExpiresAt",a),e}else navigate("signin?ref=nometamask")}catch(t){console.error(t)}},c=window.location.protocol+"//"+window.location.host+window.location.pathname;typeof r<"u"&&!h&&(r.on("accountsChanged",async t=>{const e={userPublicAddress:t[0],isWalletConnected:!0,username:"",network:"arbitrum"};t[0]&&await n({data:e}).then(s=>{e.username=s.data.profile.username});const a=new Date;a.setTime(a.getTime()+6*60*60*1e3),localStorage.setItem("rpcUserData",JSON.stringify(e)),localStorage.setItem("isRPCUserAuthenticated",!0),localStorage.setItem("rpcUserExpiresAt",a),console.log(c),window.location.assign(c+"?ref=switchAccount")}),r.on("chainChanged",t=>{window.location.reload()}));const g=async()=>{let t=new Promise((o,m)=>{let i=0,u=1e3;const l=()=>{if(window.tronWeb){o(!0);return}if(i++,i>=u){m(!1);return}setTimeout(l,100)};l()});const e={userPublicAddress:"",isWalletConnected:!1,username:"",network:"shasta",isNonWalletUser:!1};if(!t)return alert("Please login into Tronlink wallet extension!"),e;let a;if(window.tronLink.ready)a=tronLink.tronWeb;else if((await tronLink.request({method:"tron_requestAccounts"})).code===200)a=tronLink.tronWeb;else return d("Make sure tronlink is unlocked!");await n({data:e}).then(o=>{e.username=o.data.profile.username}),e.userPublicAddress=a.defaultAddress.base58,e.isWalletConnected=!0;const s=new Date;return s.setTime(s.getTime()+6*60*60*1e3),localStorage.setItem("rpcUserExpiresAt",s),localStorage.setItem("isRPCUserAuthenticated",!0),localStorage.setItem("rpcUserData",JSON.stringify(e)),e};export{g as a,f as h};
//# sourceMappingURL=style.js.map
