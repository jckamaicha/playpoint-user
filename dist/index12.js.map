{"version":3,"file":"index12.js","sources":["../src/pages/predictions/index.jsx"],"sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { getPredictionById } from \"../../api/Prediction\";\nimport { useRPCContext } from \"../../contexts/WalletRPC/RPCContext\";\nimport {\n  Slide,\n  Typography,\n  IconButton,\n  Toolbar,\n  AppBar,\n  Dialog,\n  Button,\n  Stack,\n  Skeleton,\n} from \"@mui/material\";\nimport { ethers } from \"ethers\";\nimport ERC20BasicAPI from \"../../utils/ERC20BasicABI.json\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nimport \"./styles/style.css\";\nimport { getChallenge, mkaeDuo } from \"../../api/Challenge\";\n\nconst Prediction = () => {\n  const { pid } = useParams();\n  const [predictionData, setPredictionData] = React.useState([]);\n  const [questions, setquestions] = React.useState([]);\n  const [userPredictions, setUsePredictions] = React.useState([]);\n  const [loading, setloading] = React.useState(true);\n  const [initData] = useRPCContext();\n  const [currChallenege, setCurrChallenge] = React.useState([]);\n  const [activePredition, setActivePrediction] = React.useState(\"\");\n  const { userPublicAddress, userPPTTBalance, userETHBalance } = initData;\n  const [floatingButton, ShowFloatingButton] = React.useState(false);\n  const [mode, setMode] = React.useState(\"\");\n  const [open, setOpen] = React.useState(false);\n  const [challengeStat, setCStat] = React.useState({});\n\n  React.useEffect(() => {\n    if (!open) {\n      getPredictionById(pid).then((res) => {\n        if (res.data.data) {\n          console.log(res.data.data);\n          setPredictionData(res.data.data[0]);\n          setquestions(res.data.data[1]);\n          setloading(false);\n        }\n      });\n    }\n  }, [open, mode]);\n\n  React.useEffect(() => {\n    if (mode == \"watch-challenge\") {\n      console.log(\"fetching\");\n      getChallenge(currChallenege).then((res) => {\n        console.log(res.data);\n        setCStat(res.data);\n      });\n    }\n  }, [mode]);\n\n  React.useEffect(() => {\n    setloading(true);\n    let allp = JSON.parse(sessionStorage.getItem(\"predictions\"));\n    if (allp) {\n      allp = allp.filter((prediction) => {\n        if (\n          prediction.predictedBy === userPublicAddress &&\n          prediction._id !== pid\n        ) {\n          return prediction;\n        }\n      });\n      setUsePredictions(allp);\n      setloading(false);\n    }\n  }, [userPublicAddress]);\n\n  /**\n   * @dev function to join duo challenge\n   */\n  const joinChallenge = (challenge, _mode) => {\n    setCurrChallenge(challenge);\n    setMode(_mode);\n    setOpen(true);\n  };\n  const watchChallenge = (_mode, id) => {\n    setMode(_mode);\n    setOpen(true);\n    setCurrChallenge(id);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const setParticipant = (prediction) => {\n    setActivePrediction(prediction._id);\n  };\n\n  const _joinChallenge = async () => {\n    toast(\"Challenging..\", {\n      type: \"info\",\n    });\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const PPTTContract = new ethers.Contract(\n      import.meta.env.VITE_BETA_PPTT_CONTRACT_ADDRESS, // Sepolia PPTT Token Address\n      ERC20BasicAPI,\n      provider\n    ).connect(provider.getSigner());\n\n    const _ppttAmount =\n      currChallenege.amount > 10\n        ? toFixed((currChallenege.amount / 0.02) * 10 ** 18)\n        : ((currChallenege.amount / 0.02) * 1e18).toString();\n    console.log(_ppttAmount);\n    // transfer prediction pool\n    const txn = await PPTTContract.transfer(\n      import.meta.env.VITE_BETA_FACTORY_CONTRACT_ADDRESS, // contract address\n      _ppttAmount\n    );\n\n    const data = {\n      predictionId: currChallenege.predictionId,\n      type: currChallenege.type,\n      participants: {\n        prediction: activePredition,\n        txnhash: txn.hash,\n      },\n    };\n    const res = await mkaeDuo(data);\n    if (res.status == 201) {\n      toast(\"Challenge Created\", { type: \"success\" });\n      handleClose();\n    }\n  };\n\n  return (\n    <>\n      <div className=\"userprediction_container\">\n        {predictionData.user && !loading ? (\n          <div className=\"container\">\n            <div className=\"profile_area\">\n              <img\n                src={`https://robohash.org/${predictionData.user[0].username ||\n                  \"aa\"}`}\n                loading=\"lazy\"\n              />\n              <h3>\n                <a href=\"#\">{predictionData.user[0].username}</a>\n              </h3>\n              <p>\n                {\" \"}\n                <>\n                  {`${predictionData.user[0].walletID}`.substring(0, 15) +\n                    `...` +\n                    `${predictionData.user[0].walletID}`.substring(\n                      predictionData.user[0].walletID.length - 3\n                    )}{\" \"}\n                  <i className=\"ri-arrow-right-up-line\"></i>\n                </>\n              </p>\n              <p>\n                Prediction Amount: ${predictionData.amount} ~{\" \"}\n                {predictionData.amount / 0.02}PPTT\n              </p>\n            </div>\n            <div className=\"answers_area\">\n              <div>\n                <span>Pool: {questions.poolType}</span>\n                <span>Price: {questions.questionairePrice}</span>\n              </div>\n              <h1>Questions & Answers</h1>\n              <div className=\"questions\">\n                {questions?.questionaires?.questions.map((question, key) => {\n                  return (\n                    <div className=\"question_answer\" key={key}>\n                      <h4>\n                        Q{key + 1}. {question}\n                        <span>\n                          {questions?.questionaires?.points[key]} Points\n                        </span>\n                      </h4>\n                      <p>Answer: {predictionData.answers[key]}</p>\n                    </div>\n                  );\n                })}\n              </div>\n              <div className=\"btn_area\">\n                {predictionData.challenges.map((challenges, key) => {\n                  return (\n                    <div className=\"pool_info\" key={key}>\n                      <p>\n                        Pool Type: {String(challenges.type).toLocaleUpperCase()}\n                      </p>\n                      <p>Total Slot: {challenges.slot}</p>\n                      <p>Pool Entry Amount: {challenges.amount / 0.02}PPTT</p>\n                      <p>\n                        {predictionData.predictedBy !== userPublicAddress ? (\n                          challenges.participants.length < challenges.slot ? (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"secondary\"\n                              onClick={() =>\n                                joinChallenge(challenges, \"challenge\")\n                              }\n                            >\n                              Challenge {challenges.participants.length} of{\" \"}\n                              {challenges.slot}\n                            </Button>\n                          ) : (\n                            <p>All Slots Full </p>\n                          )\n                        ) : (\n                          <Button\n                            variant=\"outlined\"\n                            color=\"error\"\n                            onClick={() =>\n                              watchChallenge(\"watch-challenge\", challenges._id)\n                            }\n                          >\n                            View Challenge\n                          </Button>\n                        )}\n                      </p>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"skeleton__container__predictions\">\n            <div className=\"profile_area\">\n              <Stack spacing={1}>\n                <Skeleton variant=\"rectangular\" width={200} height={100} />\n                <Skeleton variant=\"rectangular\" width={70} height={20} />\n                <Skeleton variant=\"rectangular\" width={160} height={20} />\n                <Skeleton variant=\"rectangular\" width={210} height={20} />\n              </Stack>\n            </div>\n            <div className=\"answer_area\">\n              <Stack spacing={0}>\n                <Skeleton\n                  variant=\"text\"\n                  component={\"p\"}\n                  width={200}\n                  height={40}\n                />\n                <Skeleton\n                  variant=\"text\"\n                  component={\"h1\"}\n                  width={300}\n                  height={50}\n                />\n                {[0, 1].map((question, i) => {\n                  return (\n                    <Stack key={i}>\n                      <Skeleton\n                        variant=\"text\"\n                        component={\"h1\"}\n                        width={500}\n                        height={50}\n                        className=\"question\"\n                      />\n                      <Skeleton\n                        variant=\"text\"\n                        component={\"h4\"}\n                        width={800}\n                        height={50}\n                        className=\"points\"\n                      />\n                      <Skeleton\n                        variant=\"text\"\n                        component={\"p\"}\n                        width={100}\n                        height={50}\n                        className=\"answer\"\n                      />\n                    </Stack>\n                  );\n                })}\n              </Stack>\n              <Stack\n                sx={{ display: \"flex\", flexDirection: \"row\", gap: \"70px\" }}\n              >\n                <Skeleton variant=\"rectangular\" width={100} height={40} />\n                <Skeleton variant=\"rectangular\" width={100} height={40} />\n                <Skeleton variant=\"rectangular\" width={200} height={40} />\n                <Skeleton variant=\"rectangular\" width={200} height={40} />\n              </Stack>\n            </div>\n          </div>\n        )}\n        <div className=\"divider\"></div>\n        <div className=\"other_prediction__container\">\n          <h2>Your Predictions in same pool</h2>\n          {!loading ? (\n            <div className=\"otherpredictions\">\n              {userPredictions.length > 0 ? (\n                userPredictions.map((_pr, k) => {\n                  return (\n                    <div key={k}>\n                      <div className=\"otherpredictions_box\">\n                        {questions?.questionaires?.questions.map(\n                          (question, key) => {\n                            return (\n                              <div\n                                className=\"question_answer\"\n                                key={key}\n                                style={{ margin: \"1.2em 0\" }}\n                              >\n                                <h4>\n                                  Q{key + 1}. {question}\n                                </h4>\n                                <p>Answer: {_pr.answers[key]}</p>\n                              </div>\n                            );\n                          }\n                        )}\n                      </div>\n                    </div>\n                  );\n                })\n              ) : (\n                <div>\n                  <h3>Looks like you have only 1 or no entries in this pool</h3>\n                  <a\n                    href={`/predict/${predictionData.fixtureId}`}\n                    className=\"pp_button\"\n                  >\n                    Predic Now\n                  </a>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"otherpredictionskeleton__container\">\n              <div className=\"otherpredictions\">\n                {[0, 1, 2, 3].map((predictions, i) => {\n                  return (\n                    <div key={i}>\n                      {[0, 1, 2].map((_, i) => {\n                        return (\n                          <Stack\n                            spacing={1}\n                            sx={{ marginBottom: \"1em\" }}\n                            key={i}\n                          >\n                            <Skeleton\n                              variant=\"rectangular\"\n                              width={550}\n                              height={30}\n                            />\n                            <Skeleton\n                              variant=\"rectangular\"\n                              width={100}\n                              height={30}\n                            />\n                          </Stack>\n                        );\n                      })}\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      {predictionData && predictionData.user && (\n        <Dialog\n          fullScreen\n          open={open}\n          onClose={handleClose}\n          TransitionComponent={Transition}\n          color=\"white\"\n          className=\"custom-paper\"\n        >\n          <AppBar sx={{ position: \"relative\", backgroundColor: \"black\" }}>\n            <Toolbar>\n              <IconButton\n                edge=\"start\"\n                color=\"inherit\"\n                onClick={handleClose}\n                aria-label=\"close\"\n              >\n                X\n              </IconButton>\n              {mode == \"challenge\" && (\n                <Typography\n                  sx={{ ml: 2, flex: 1 }}\n                  variant=\"h6\"\n                  component=\"div\"\n                >\n                  {predictionData.user &&\n                    \"Challenge \" +\n                      predictionData?.user[0]?.username +\n                      \"-\" +\n                      currChallenege.type}\n                </Typography>\n              )}\n              {mode == \"watch-challenge\" && (\n                <Typography\n                  sx={{ ml: 2, flex: 1 }}\n                  variant=\"h6\"\n                  component=\"div\"\n                >\n                  Your Challenge Pools\n                </Typography>\n              )}\n            </Toolbar>\n          </AppBar>\n\n          {mode == \"challenge\" && (\n            <div>\n              <h2 className=\"dialog__title\">\n                Select your entry to challenge{\" \"}\n                {predictionData?.user[0]?.username}\n              </h2>\n              <div className=\"predictions__container\">\n                <div\n                  className=\"predictions\"\n                  onClick={() => ShowFloatingButton(true)}\n                >\n                  {userPredictions.map((_pr, k) => {\n                    return (\n                      <div\n                        style={{\n                          border: \"0.2px solid white\",\n                          padding: \"10px\",\n                          cursor: \"pointer\",\n                        }}\n                        key={k}\n                        onClick={() => setParticipant(_pr)}\n                        className={activePredition == _pr._id ? \"selected\" : \"\"}\n                      >\n                        <div>\n                          {questions?.questionaires?.questions.map(\n                            (question, key) => {\n                              return (\n                                <div\n                                  className=\"question_answer\"\n                                  key={key}\n                                  style={{ margin: \"1.2em 0\" }}\n                                >\n                                  <h4>\n                                    Q{key + 1}. {question}\n                                  </h4>\n                                  <p>Answer: {_pr.answers[key]}</p>\n                                </div>\n                              );\n                            }\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n                  {floatingButton && (\n                    <div className=\"floatingButton__container\">\n                      <Button variant=\"contained\">Challange</Button>\n                    </div>\n                  )}\n                </div>\n                {activePredition && (\n                  <div className=\"activePrediction__container\">\n                    <h4>Selected Entry</h4>\n                    <hr />\n                    <p>\n                      Entry ID: <span>{activePredition}</span>{\" \"}\n                    </p>\n                    <p>\n                      Challenge Entry Amount:{\" \"}\n                      <span>{currChallenege.amount / 0.02}PPTT</span>\n                    </p>\n                    <p>\n                      Available Assets:{\" \"}\n                      <span>\n                        {parseFloat(userETHBalance).toFixed(2)} ETH{\" \"}\n                        {parseFloat(userPPTTBalance).toFixed(2)} PPTT\n                      </span>\n                    </p>\n                    <Button variant=\"outlined\" onClick={() => _joinChallenge()}>\n                      Challenge\n                    </Button>\n                  </div>\n                )}\n              </div>\n\n              {floatingButton && (\n                <div className=\"floatingButton__container\">\n                  <Button variant=\"contained\" onClick={() => _joinChallenge()}>\n                    Challange\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n\n          {mode == \"watch-challenge\" && challengeStat._id ? (\n            <div className=\"challenege_status_container\">\n              <h3>\n                Challenge ID: #\n                {challengeStat._id.slice(-10, challengeStat._id.length)}\n              </h3>\n              <div className=\"csc__Header\">\n                <p>No of slots: {challengeStat.slot}</p>\n                <p>Intra Pool: {challengeStat.type}</p>\n                <p>Pool status: {challengeStat.status}</p>\n                <p>Filled: {challengeStat.participants.length}</p>\n              </div>\n              <div className=\"csc__Content\">\n                {challengeStat.participants.map((_challenger, key) => {\n                  <p>sdfdfsd</p>;\n                })}\n                <div className=\"card\"></div>\n              </div>\n            </div>\n          ) : (\n            <h3>Looks like you have no entries in the pool of </h3>\n          )}\n        </Dialog>\n      )}\n    </>\n  );\n};\n\nexport default Prediction;\n"],"names":["Transition","React","props","ref","Slide","Prediction","pid","useParams","predictionData","setPredictionData","questions","setquestions","userPredictions","setUsePredictions","loading","setloading","initData","useRPCContext","currChallenege","setCurrChallenge","activePredition","setActivePrediction","userPublicAddress","userPPTTBalance","userETHBalance","floatingButton","ShowFloatingButton","mode","setMode","open","setOpen","challengeStat","setCStat","getPredictionById","res","getChallenge","allp","prediction","joinChallenge","challenge","_mode","watchChallenge","id","handleClose","setParticipant","_joinChallenge","toast","provider","ethers.providers.Web3Provider","PPTTContract","ethers.Contract","ERC20BasicAPI","_ppttAmount","txn","data","mkaeDuo","jsxs","Fragment","jsx","question","key","challenges","Button","Stack","Skeleton","predictions","_","i","_pr","k","Dialog","AppBar","Toolbar","IconButton","Typography","_challenger"],"mappings":"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"}